"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { Product, createProductUrl, getProductBySlug, fuzzyMatchProduct } from "@/utils/product-utils"
import { mockProducts } from "@/utils/product-utils"
import { UnifiedProductDetail } from "@/components/products/unified-product-detail"

interface ProductPageProps {
  params: {
    slug: string
  }
}

export default function ProductPage({ params }: ProductPageProps) {
  const { slug } = params
  const router = useRouter()
  const [product, setProduct] = useState<Product | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [validSlug, setValidSlug] = useState(true)
  const [potentialMatches, setPotentialMatches] = useState<Product[]>([])

  useEffect(() => {
    async function loadProduct() {
      try {
        setIsLoading(true)
        
        // Attempt to find the product by slug
        const foundProduct = getProductBySlug(slug, mockProducts)
        
        if (foundProduct) {
          setProduct(foundProduct)
          setValidSlug(true)
          
          // If current URL slug is different from the canonical one, redirect
          const correctUrl = createProductUrl(foundProduct)
          const currentUrl = `/products/${slug}`
          
          if (currentUrl !== correctUrl && typeof window !== 'undefined') {
            console.log(`Redirecting from ${currentUrl} to canonical URL ${correctUrl}`)
            router.replace(correctUrl)
            return
          }
          
          // Log product view
          console.log(`Product view: ${foundProduct.name} (${foundProduct.id})`)
        } else {
          console.log(`No product found for slug: ${slug}`)
          setValidSlug(false)
          
          // Try fuzzy matching
          const matches = fuzzyMatchProduct(slug, mockProducts)
          setPotentialMatches(matches)
          
          if (matches.length > 0) {
            console.log(`Found ${matches.length} similar products`)
          }
        }
      } catch (err) {
        console.error("Error loading product:", err)
        setError("Failed to load product. Please try again later.")
      } finally {
        setIsLoading(false)
      }
    }

    loadProduct()
  }, [slug, router])

  if (isLoading) {
    return (
      <div className="container mx-auto py-12 animate-pulse">
        <div className="h-6 w-32 bg-muted rounded mb-4"></div>
        <div className="grid md:grid-cols-2 gap-8">
          <div className="aspect-square bg-muted rounded"></div>
          <div className="space-y-4">
            <div className="h-8 w-3/4 bg-muted rounded"></div>
            <div className="h-4 w-1/2 bg-muted rounded"></div>
            <div className="h-24 w-full bg-muted rounded"></div>
            <div className="h-10 w-32 bg-muted rounded"></div>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="container mx-auto py-12">
        <div className="bg-destructive/10 text-destructive p-4 rounded-md">
          <h2 className="text-lg font-bold">Error</h2>
          <p>{error}</p>
        </div>
      </div>
    )
  }

  if (!validSlug || !product) {
    return (
      <div className="container mx-auto py-12">
        <div className="bg-muted p-6 rounded-lg">
          <h2 className="text-2xl font-bold mb-4">Product Not Found</h2>
          <p className="mb-6">We couldn't find a product with the slug "{slug}".</p>
          
          {potentialMatches.length > 0 && (
            <div>
              <h3 className="text-lg font-semibold mb-2">Did you mean:</h3>
              <ul className="space-y-2">
                {potentialMatches.map((match) => (
                  <li key={match.id}>
                    <a 
                      href={createProductUrl(match)}
                      className="text-primary hover:underline"
                    >
                      {match.name}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    )
  }

  return <UnifiedProductDetail product={product} />
} 